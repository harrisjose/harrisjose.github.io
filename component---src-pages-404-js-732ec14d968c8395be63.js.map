{"version":3,"sources":["webpack:///./src/pages/404.js","webpack:///./.cache/gatsby-browser-entry.js","webpack:///./.cache/public-page-renderer.js","webpack:///./.cache/public-page-renderer-prod.js","webpack:///./src/components/layout.js"],"names":["h1Style","name","styles","linkStyle","__webpack_exports__","props","siteTitle","get","Object","_emotion_core__WEBPACK_IMPORTED_MODULE_0__","_components_layout__WEBPACK_IMPORTED_MODULE_5__","children","className","react_helmet__WEBPACK_IMPORTED_MODULE_3___default","a","title","css","href","pageQuery","React","createContext","PropTypes","object","string","isRequired","func","m","module","exports","require","default","ProdPageRenderer","_ref","location","pageResources","loader","getResourcesForPathnameSync","pathname","createElement","InternalPageRenderer","assign","json","propTypes","shape","cssVars"],"mappings":"iNAOMA,EAAO,CAAAC,KAAA,QAAAC,OAAA,mDAKPC,EAAS,CAAAF,KAAA,SAAAC,OAAA,uDAMAE,EAAA,iBAAAC,GACb,IAAMC,EAAYC,IAAIF,EAAO,gCAE7B,OACEG,OAAAC,EAAA,EAAAD,CAACE,EAAA,EAAD,CAAQC,SAAUN,EAAMM,UACtBH,OAAAC,EAAA,EAAAD,CAAA,OAAKI,UAAU,8BACbJ,OAAAC,EAAA,EAAAD,CAACK,EAAAC,EAAD,CAAQC,MAAK,oBAAsBT,IACnCE,OAAAC,EAAA,EAAAD,CAAA,MAAII,UAAS,iBAAoBI,IAAKhB,GAAtC,OACAQ,OAAAC,EAAA,EAAAD,CAAA,WACEA,OAAAC,EAAA,EAAAD,CAAA,KAAGI,UAAU,QAAb,yCACAJ,OAAAC,EAAA,EAAAD,CAAA,SACEA,OAAAC,EAAA,EAAAD,CAAA,KAAGQ,IAAKb,EAAWc,KAAK,KAAxB,gBAUL,IAAMC,EAAS,kJC1BKC,IAAMC,cAAc,IA0CvCC,IAAUC,OACTD,IAAUE,OAAOC,WAChBH,IAAUI,KACRJ,IAAUI,0BC1DtB,IAAsBC,EAKpBC,EAAOC,SALaF,EAKWG,EAAQ,OALRH,EAAEI,SAAYJ,oGCMzCK,EAAmB,SAAAC,GAAkB,IAAfC,EAAeD,EAAfC,SACpBC,EAAgBC,UAAOC,4BAA4BH,EAASI,UAClE,OAAKH,EAIEf,IAAMmB,cAAcC,IAApB/B,OAAAgC,OAAA,CACLP,WACAC,iBACGA,EAAcO,OANV,MAUXV,EAAiBW,UAAY,CAC3BT,SAAUZ,IAAUsB,MAAM,CACxBN,SAAUhB,IAAUE,OAAOC,aAC1BA,YAGUO,yDCjBTa,6BAAO,CAAA3C,KAAA,QAAAC,OAAA,sLAgBEE,EAAA,WAAA4B,GAAA,IAAGrB,EAAHqB,EAAGrB,SAAH,OACbH,OAAAC,EAAA,EAAAD,CAAA,WACEA,OAAAC,EAAA,EAAAD,CAACC,EAAA,EAAD,CAAQP,OAAQ0C,IACfjC","file":"component---src-pages-404-js-732ec14d968c8395be63.js","sourcesContent":["import React from 'react';\nimport get from 'lodash/get';\nimport Helmet from 'react-helmet';\nimport {css} from '@emotion/core';\nimport { StaticQuery, graphql } from \"gatsby\";\nimport Layout from '../components/layout';\n\nconst h1Style = css`\n  border-right: 1px solid #333;\n  font-weight: normal;\n`;\n\nconst linkStyle = css`\n  font-size: 0.8em;\n  text-decoration: none;\n  color: #4467A8;\n`;\n\nexport default props => {\n  const siteTitle = get(props, 'data.site.siteMetadata.title');\n\n  return (\n    <Layout children={props.children}>\n      <div className=\"flex flex-center minvh-100\">\n        <Helmet title={`Page Not Found | ${siteTitle}`}/>\n        <h1 className={`mr-3 pr-3 py-2`} css={h1Style}>404</h1>\n        <div>\n          <p className=\"mb-1\">Uh, this page does not seem to exist.</p>\n          <p>\n            <a css={linkStyle} href=\"/\">\n              Go Home\n            </a>\n          </p>\n        </div>\n      </div>\n    </Layout>\n  );\n};\n\nexport const pageQuery = graphql`\n  query NotFoundQuery {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n  }\n`;\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Link, {\n  withPrefix,\n  withAssetPrefix,\n  navigate,\n  push,\n  replace,\n  navigateTo,\n  parsePath,\n} from \"gatsby-link\"\nimport PageRenderer from \"./public-page-renderer\"\n\nconst StaticQueryContext = React.createContext({})\n\nconst StaticQuery = props => (\n  <StaticQueryContext.Consumer>\n    {staticQueryData => {\n      if (\n        props.data ||\n        (staticQueryData[props.query] && staticQueryData[props.query].data)\n      ) {\n        return (props.render || props.children)(\n          props.data ? props.data.data : staticQueryData[props.query].data\n        )\n      } else {\n        return <div>Loading (StaticQuery)</div>\n      }\n    }}\n  </StaticQueryContext.Consumer>\n)\n\nconst useStaticQuery = query => {\n  if (\n    typeof React.useContext !== `function` &&\n    process.env.NODE_ENV === `development`\n  ) {\n    throw new Error(\n      `You're likely using a version of React that doesn't support Hooks\\n` +\n        `Please update React and ReactDOM to 16.8.0 or later to use the useStaticQuery hook.`\n    )\n  }\n  const context = React.useContext(StaticQueryContext)\n  if (context[query] && context[query].data) {\n    return context[query].data\n  } else {\n    throw new Error(\n      `The result of this StaticQuery could not be fetched.\\n\\n` +\n        `This is likely a bug in Gatsby and if refreshing the page does not fix it, ` +\n        `please open an issue in https://github.com/gatsbyjs/gatsby/issues`\n    )\n  }\n}\n\nStaticQuery.propTypes = {\n  data: PropTypes.object,\n  query: PropTypes.string.isRequired,\n  render: PropTypes.func,\n  children: PropTypes.func,\n}\n\nfunction graphql() {\n  throw new Error(\n    `It appears like Gatsby is misconfigured. Gatsby related \\`graphql\\` calls ` +\n      `are supposed to only be evaluated at compile time, and then compiled away. ` +\n      `Unfortunately, something went wrong and the query was left in the compiled code.\\n\\n` +\n      `Unless your site has a complex or custom babel/Gatsby configuration this is likely a bug in Gatsby.`\n  )\n}\n\nexport {\n  Link,\n  withAssetPrefix,\n  withPrefix,\n  graphql,\n  parsePath,\n  navigate,\n  push, // TODO replace for v3\n  replace, // TODO remove replace for v3\n  navigateTo, // TODO: remove navigateTo for v3\n  StaticQueryContext,\n  StaticQuery,\n  PageRenderer,\n  useStaticQuery,\n}\n","const preferDefault = m => (m && m.default) || m\n\nif (process.env.BUILD_STAGE === `develop`) {\n  module.exports = preferDefault(require(`./public-page-renderer-dev`))\n} else if (process.env.BUILD_STAGE === `build-javascript`) {\n  module.exports = preferDefault(require(`./public-page-renderer-prod`))\n} else {\n  module.exports = () => null\n}\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\n\nimport InternalPageRenderer from \"./page-renderer\"\nimport loader from \"./loader\"\n\nconst ProdPageRenderer = ({ location }) => {\n  const pageResources = loader.getResourcesForPathnameSync(location.pathname)\n  if (!pageResources) {\n    return null\n  }\n\n  return React.createElement(InternalPageRenderer, {\n    location,\n    pageResources,\n    ...pageResources.json,\n  })\n}\n\nProdPageRenderer.propTypes = {\n  location: PropTypes.shape({\n    pathname: PropTypes.string.isRequired,\n  }).isRequired,\n}\n\nexport default ProdPageRenderer\n","import React from 'react';\nimport { Global, css } from '@emotion/core';\n\nimport 'fractures/dist/fractures.css';\nimport '../styles/highlight.css';\nimport '../styles/index.css';\n\n// Hack to make custom variables work\nconst cssVars = css`\n  :root {\n    --red:#f3234a;\n    --yellow:#ffd246;\n    --mint:#d7f3d4;\n    --navy:#1c3c5a;\n    --light:#f7f8f8;\n    --smoke:#d9dbdd;\n    --gray:#aab0b5;\n    --blue: #3274D6;\n    --green: #2BB772;\n    --haze: #F7F8F8;\n    --charcoal: #666;\n  }\n`;\n\nexport default ({ children }) => (\n  <div>\n    <Global styles={cssVars}/>\n    {children}\n  </div>\n)\n"],"sourceRoot":""}