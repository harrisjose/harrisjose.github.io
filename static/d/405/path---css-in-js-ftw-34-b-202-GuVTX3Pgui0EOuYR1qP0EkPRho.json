{"data":{"site":{"siteMetadata":{"title":"Harris Jose","author":"Harris Jose"}},"markdownRemark":{"id":"da314d80-a59e-5287-9c27-911c0fd7e691","html":"<p>I gave a presentation at work recently about the whole <strong>CSS vs CSS in JS</strong> debacle and about why we should be looking at CSS in JS more seriously. I‚Äôm pretty sure I messed it up but I think the slides came out to be kinda nice even though I made them in 2 hours üòê.</p>\n<div class=\"py-1\"></div>\n<blockquote>\n<p>These slides go in two directions - top-down and left-right. If you‚Äôre looking through them remember to go down before going to the next slide. Also the TL;DR version of the talk is right below, just in case anyone‚Äôs interested.</p>\n</blockquote>\n<div class=\"py-2\"></div>\n<h2>Better Components</h2>\n<p>I like handlebars a lot. It probably is my favorite templating language. But consuming components with the handlebars syntax just feels wrong, particularly when the angle bracket syntax feels much more closer to html and more in line with other modern frameworks.</p>\n<p>The core team has been working really hard on <a href=\"https://github.com/emberjs/ember.js/issues/16301\">Glimmer components</a> and they really do look very promising. A particularly significant improvement in Glimmer components is how they make the separation between props and attributes <a href=\"https://www.emberjs.com/blog/2017/10/10/glimmer-progress-report.html#toc_component-attributes\">explicit</a>. ‚ÄòSplattributes‚Äô and not requiring a wrapper element for every component is also very cool.</p>\n<p>Not being able to use all these in existing apps (particularly when, newer features in Ember have been always been very straightforward to adopt) is a real bummer. Besides this, I‚Äôd also like to see <a href=\"https://vuejs.org/v2/guide/single-file-components.html\">single file components</a> but that is much more of a personal peeve than a deal-breaker.</p>\n<h2>Native NPM Module Support</h2>\n<p>I‚Äôd love it if I could <code class=\"language-text\">npm install package@version</code> and have it just work instead of importing files from it into the app tree (comments about broccoli to follow) or go looking for a suitable ember-cli-addon that wraps this up for consumption.</p>\n<p>An add-on might make sense in particular cases but <strong>npm</strong> is a treasure trove of small modules that solve very specific use cases. Take a look at this <a href=\"https://github.com/feross/clipboard-copy\">lovely little module</a> by Feross. I would love it if I could just do this and have it work,</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> copy <span class=\"token keyword\">from</span> <span class=\"token string\">'clipboard-copy'</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">...</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> Component<span class=\"token punctuation\">.</span><span class=\"token function\">extend</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  actions<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">click</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">copy</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Yaay!!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">/*do something*/</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2>Easier Code Splitting</h2>\n<p>Engines are great. I really do think they solve a particularly nasty use case where you have entire routes shared across multiple apps. However, for small to medium sized apps, would I really go through with the effort of splitting up code into engines so that I can have a smaller initial bundle? Probably not.</p>\n<p>Afaik, effort is already underway for code-splitting and tree-shaking and it would be really nice to be able to use this as soon as possible.</p>\n<h2>Better &#x26; Faster Build Pipelines</h2>\n<p>I don‚Äôt really like <a href=\"http://broccolijs.com/#\">Broccoli</a>. Maybe <strong><em>understand</em></strong> would be a better word. What is Broccoli supposed to manage in ember-cli apps? Is it equivalent to what webpack does for React and Vue apps? Or is it supposed to function as a base layer for the ember-cli add-on system? (If you‚Äôve got a link that explains all this, please share).</p>\n<p>I‚Äôve seen Broccoli being used to create asset pipeline for a smallish project and I‚Äôm imagining that it somewhat does the same thing for ember. But the lack of documentation makes it very frustrating to understand what it‚Äôs being used for and harder to hack into, when needed.</p>\n<blockquote>\n<p><em>Update</em>: <a href=\"https://twitter.com/jwwweber\">@jwwweber</a> pointed <a href=\"http://www.oligriffiths.com/broccolijs/\">this article</a> out to me recently and although I haven‚Äôt had time to go through this entirely yet, it does look like Oli Griffiths has a good starting point for people wanting to know more about Broccoli.</p>\n</blockquote>\n<p>Besides Broccoli, an easier way to generate multiple builds (one for newer browsers and one for legacy) would also be very useful.</p>\n<h2>Curated Best Practices and Add-ons</h2>\n<p>Ember has been around for quite some time now and it‚Äôs kinda hard to keep track of the best practices (I sometimes get confused on whether something I‚Äôm doing out of habit has been anti-pattern‚Äôd). I guess better documentation and examples should take care of this.</p>\n<p>Also, it would be really nice to have a set of recommended add-ons, curated by the community. Plugins like <em>route-action-helpers</em> and <em>ember-concurrency</em> make life a lot easier and developers should be actively encouraged to use them whenever appropriate.</p>\n<h2>Concluding Thoughts</h2>\n<p>2018 is the year Ember should play catch up. As a community, a lot of us value stability maybe a little too much, and it has probably made us a bit stagnant.</p>\n<p>Certain things, like HMR, CSS in JS and Code-Splitting that have been widely adopted across the JavaScript community are still not must-have‚Äôs inside the Ember community. I believe we can alleviate a lot of this disconnect if we work on getting these features shipped to users as soon as possible.</p>\n<p>I‚Äôm also excited to read what fellow developers in the community have to say. Here‚Äôs to hoping the core team takes all our opinions into account for the 2018 Roadmap.</p>","frontmatter":{"title":"Why CSS in JS deserves your attention","date":"July 29, 2018"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/css-in-js-ftw/","previous":{"fields":{"slug":"/emberjs-2018/"},"frontmatter":{"title":"EmberJS 2018 - My Wishlist"}},"next":null}}