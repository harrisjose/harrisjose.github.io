{"data":{"site":{"siteMetadata":{"title":"Harris Jose","author":"Harris Jose"}},"markdownRemark":{"id":"580c5fd7-99e8-555f-8ed2-d6df532a8dd8","html":"<h2>Shouldn’t this be handled by my framework?</h2>\n<p>Technically, it would be. Ember data for example, works based on the <a href=\"https://web.dev/stale-while-revalidate/\">Stale While Revalidate</a> pattern for caching requests. React has two great libraries: <a href=\"https://swr.now.sh\">SWR</a> and <a href=\"https://github.com/tannerlinsley/react-query#installation\">react-query</a> for doing this.</p>\n<p>There’s also ways to deal with this using service workers.</p>\n<p>I found myself building out something like this for work last week and was surprised at how easy to build a cache layer under 100 LOC.</p>\n<h2>Caching responses</h2>\n<p>First, we need a way to add and remove queries from the cache and a way to check if a query already exists in the cache.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Cache</span> <span class=\"token punctuation\">{</span>\n  queries <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span> <span class=\"token comment\">// Object to store queries in</span>\n\n  <span class=\"token function\">createRequest</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">queryFn<span class=\"token punctuation\">,</span> url<span class=\"token punctuation\">,</span> params</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Get a unique hash for this query</span>\n    <span class=\"token keyword\">let</span> hash <span class=\"token operator\">=</span> <span class=\"token function\">getQueryHash</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">,</span> params<span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">// Call the query fn with params</span>\n    <span class=\"token keyword\">let</span> promise <span class=\"token operator\">=</span> <span class=\"token function\">queryFn</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">,</span> params<span class=\"token punctuation\">)</span>\n\n    promise\n      <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// Once the promise resolves store the response into the cache</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>queries<span class=\"token punctuation\">[</span>hash<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token operator\">...</span>this<span class=\"token punctuation\">.</span>queries<span class=\"token punctuation\">[</span>hash<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n          response<span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token function\">cache</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">_</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// If the request fails, you probably want to remove it from the cache</span>\n        <span class=\"token keyword\">delete</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>queries<span class=\"token punctuation\">[</span>hash<span class=\"token punctuation\">]</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\">// Return the promise so user can get the response once it resolves</span>\n    <span class=\"token keyword\">return</span> promise\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><strong><em>getQueryHash</em></strong> is a function that returns a unique hash code based on the url and params. The easiest way to do this is to sort the params and stringify them and then append them to the url.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token function\">getQueryHash</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">url<span class=\"token punctuation\">,</span> params</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> paramString <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">key</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span> value<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token template-string\"><span class=\"token string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>url<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">:</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>params<span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">`</span></span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2>De-duplicating requests</h2>\n<p>A simple optimization we can make here is de-duplicating requests by storing the promise inside the cache. When there’s another query with the same url and params it’s easier to just return the existing promise.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Cache</span> <span class=\"token punctuation\">{</span>\n  queries <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">createRequest</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">queryFn<span class=\"token punctuation\">,</span> url<span class=\"token punctuation\">,</span> params</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> hash <span class=\"token operator\">=</span> <span class=\"token function\">getQueryHash</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">,</span> params<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>queries<span class=\"token punctuation\">[</span>hash<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// If there is an ongoing request for the same</span>\n      <span class=\"token comment\">// hash, then return it's promise instead of creating</span>\n      <span class=\"token comment\">// a new request</span>\n      <span class=\"token keyword\">let</span> <span class=\"token punctuation\">{</span> promise <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>queries<span class=\"token punctuation\">[</span>hash<span class=\"token punctuation\">]</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>promise<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> promise\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">let</span> promise <span class=\"token operator\">=</span> <span class=\"token function\">queryFn</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">,</span> params<span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\">// If the same query is called again, we can re-use the</span>\n    <span class=\"token comment\">// same promise if this request has not yet completed</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>queries<span class=\"token punctuation\">[</span>hash<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n      response<span class=\"token punctuation\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n      promise<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span>\n\n    promise\n      <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// Once the promise resolves, remove it and</span>\n        <span class=\"token comment\">// store the response</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>queries<span class=\"token punctuation\">[</span>hash<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token operator\">...</span>this<span class=\"token punctuation\">.</span>queries<span class=\"token punctuation\">[</span>hash<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n          response<span class=\"token punctuation\">,</span>\n          promise<span class=\"token punctuation\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token function\">cache</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">_</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">delete</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>queries<span class=\"token punctuation\">[</span>hash<span class=\"token punctuation\">]</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">return</span> promise\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2>Cache Invalidation</h2>\n<p>And how do you invalidate requests in the cache? Well, ‘it depends’. Retrieving a single request or removing one is pretty straightforward.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">url<span class=\"token punctuation\">,</span> params</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> hash <span class=\"token operator\">=</span> <span class=\"token function\">getQueryHash</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">,</span> params<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>queries<span class=\"token punctuation\">[</span>hash<span class=\"token punctuation\">]</span> <span class=\"token operator\">||</span> <span class=\"token keyword\">null</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">url<span class=\"token punctuation\">,</span> params</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> hash <span class=\"token operator\">=</span> <span class=\"token function\">getQueryHash</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">,</span> params<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">delete</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>queries<span class=\"token punctuation\">[</span>hash<span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>These aren’t essential but in the rare scenario that you’d want to manually clear a request or check if it was already made, these will come in handy. In most cases you’d usually want the cache to expire based on a timeout. Let’s introduce a config object to our <strong><em>createRequest</em></strong> function that lets us specify how long a request should be persisted in the cache.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Cache</span> <span class=\"token punctuation\">{</span>\n  queries <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">createRequest</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">queryFn<span class=\"token punctuation\">,</span> url<span class=\"token punctuation\">,</span> params<span class=\"token punctuation\">,</span> config<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> hash <span class=\"token operator\">=</span> <span class=\"token function\">getQueryHash</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">,</span> params<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">let</span> promise <span class=\"token operator\">=</span> <span class=\"token function\">queryFn</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">,</span> params<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">let</span> timeoutFn\n\n    <span class=\"token comment\">// When the specified time interval is over, the query is</span>\n    <span class=\"token comment\">// removed from cache. We store the timeoutID from the</span>\n    <span class=\"token comment\">// timeout fn so that we can clear it if required (defaults to 5s)</span>\n    <span class=\"token keyword\">let</span> skipCache <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">includes</span><span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">.</span>cacheTimeout<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>skipCache<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      timeoutFn <span class=\"token operator\">=</span> <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">delete</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>queries<span class=\"token punctuation\">[</span>hash<span class=\"token punctuation\">]</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> config<span class=\"token punctuation\">.</span>cacheTimeout <span class=\"token operator\">||</span> <span class=\"token number\">5</span> <span class=\"token operator\">*</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>queries<span class=\"token punctuation\">[</span>hash<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n      response<span class=\"token punctuation\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n      promise<span class=\"token punctuation\">,</span>\n      timeoutFn<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">.</span>\n\n    promise<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>queries<span class=\"token punctuation\">[</span>hash<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token operator\">...</span>this<span class=\"token punctuation\">.</span>queries<span class=\"token punctuation\">[</span>hash<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n        response<span class=\"token punctuation\">,</span>\n        promise<span class=\"token punctuation\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">return</span> promise\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">url<span class=\"token punctuation\">,</span> params</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> hash <span class=\"token operator\">=</span> <span class=\"token function\">getQueryHash</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">,</span> params<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>queries<span class=\"token punctuation\">[</span>hash<span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\n  <span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">url<span class=\"token punctuation\">,</span> params</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> hash <span class=\"token operator\">=</span> <span class=\"token function\">getQueryHash</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">,</span> params<span class=\"token punctuation\">)</span>\n    <span class=\"token function\">clearTimeout</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>queries<span class=\"token punctuation\">[</span>hash<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>timeoutFn<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">delete</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>queries<span class=\"token punctuation\">[</span>hash<span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2>Using the cache</h2>\n<p>We’ll be using axios for making the requests but this should work with fetch or anything else you want to use. Since we don’t really do anything with the response, it’ll be the same as what you’d have if you’d used axios.get directly.</p>\n<p>Essentially <strong><em>createRequest</em></strong> is just a higher-level function that takes everything you’d use for making a request, and then actually makes the request for you.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">cache\n  <span class=\"token punctuation\">.</span><span class=\"token function\">createRequest</span><span class=\"token punctuation\">(</span>axios<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">,</span> <span class=\"token string\">'someurl/api/movies'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n    params<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token constant\">ID</span><span class=\"token punctuation\">:</span> <span class=\"token number\">123</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// do something with resonse</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// handle error</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>This becomes even more powerful when you combine it with the bridge pattern where all this would be wrapped up inside a data-layer that manages both the cache and axios.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// API.js</span>\n<span class=\"token keyword\">import</span> axios <span class=\"token keyword\">from</span> <span class=\"token string\">'axios'</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token constant\">API</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">,</span> params<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">createRequest</span><span class=\"token punctuation\">(</span>axios<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">,</span> url<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n      params<span class=\"token punctuation\">,</span>\n      baseURL<span class=\"token punctuation\">:</span> <span class=\"token string\">'someurl.com/api'</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// SomeComponent.js</span>\n<span class=\"token keyword\">import</span> <span class=\"token constant\">API</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./api'</span>\n<span class=\"token operator\">...</span>\n<span class=\"token function\">loadData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token constant\">API</span><span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">,</span> params<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><span class=\"token operator\">...</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","frontmatter":{"title":"Cached data fetching for client side apps","date":"May 24, 2020"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/cache-dedupe-api/","previous":{"fields":{"slug":"/css-in-js-ftw/"},"frontmatter":{"title":"Why CSS in JS deserves your attention"}},"next":null}}